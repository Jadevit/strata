name: Build Runtime Packs (llama monolith)

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ---------- Windows (MSVC) ----------
          - os: windows-latest
            triplet: x64
            variant: cpu
            outplugin: StrataLlama.dll

          - os: windows-latest
            triplet: x64
            variant: vulkan
            outplugin: StrataLlama.dll

          - os: windows-latest
            triplet: x64
            variant: cuda
            outplugin: StrataLlama.dll
            cuda_version: "12.9.0"

          # ---------- macOS (arm64: CPU + METAL) ----------
          - os: macos-14
            triplet: arm64
            variant: cpu
            outplugin: libStrataLlama.dylib

          - os: macos-14
            triplet: arm64
            variant: metal
            outplugin: libStrataLlama.dylib

          # ---------- Linux (22.04) ----------
          - os: ubuntu-22.04
            triplet: x64
            variant: cpu
            outplugin: libStrataLlama.so

          - os: ubuntu-22.04
            triplet: x64
            variant: vulkan
            outplugin: libStrataLlama.so

          - os: ubuntu-22.04
            triplet: x64
            variant: cuda
            outplugin: libStrataLlama.so
            cuda_version: "12.9.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch llama.cpp (pinned commit)
        working-directory: crates/backends/llama/llama-sys
        run: |
          set -eux
          if [ ! -d "llama.cpp" ]; then
            echo "Fetching llama.cpp source..."
            git clone https://github.com/ggerganov/llama.cpp.git llama.cpp
            cd llama.cpp
            git checkout 11f0af5504252e453d57406a935480c909e3ff37
          else
            echo "✅ llama.cpp already exists"
          fi

      - name: Set up Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            crates/backends/llama/llama-sys
            crates/backends/llama/llama-rs
            crates/backends/llama/llama-plugin

      # ---------- OS dependencies ----------
      - name: Windows · MSVC env
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Windows · Vulkan SDK (vulkan only)
        if: ${{ startsWith(matrix.os, 'windows') && matrix.variant == 'vulkan' }}
        uses: humbletim/install-vulkan-sdk@v1.2
        with:
          version: "1.3.290.0"

      - name: Windows · CUDA Toolkit (cuda only)
        if: ${{ startsWith(matrix.os, 'windows') && matrix.variant == 'cuda' }}
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: ${{ matrix.cuda_version }}
          method: network
          use-github-cache: false

      - name: Ubuntu · deps
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config zip

      - name: Ubuntu · Vulkan SDK (vulkan only)
        if: ${{ matrix.os == 'ubuntu-22.04' && matrix.variant == 'vulkan' }}
        uses: humbletim/install-vulkan-sdk@v1.2
        with:
          version: "1.3.290.0"

      - name: Ubuntu · CUDA Toolkit (cuda only)
        if: ${{ matrix.os == 'ubuntu-22.04' && matrix.variant == 'cuda' }}
        uses: Jimver/cuda-toolkit@v0.2.27
        with:
          cuda: ${{ matrix.cuda_version }}
          method: network

      # ---------- Build monolithic plugin ----------
      - name: Compute Cargo features
        shell: bash
        run: |
          case "${{ matrix.variant }}" in
            cpu)    echo "FEATS=" >> $GITHUB_ENV ;;
            cuda)   echo "FEATS=cuda" >> $GITHUB_ENV ;;
            vulkan) echo "FEATS=vulkan" >> $GITHUB_ENV ;;
            metal)  echo "FEATS=metal" >> $GITHUB_ENV ;;
            *)      echo "Unknown variant"; exit 1 ;;
          esac
          echo "Using features: ${FEATS:-<none>}"

      - name: Build monolith (release)
        shell: bash
        run: |
          set -eux
          if [ -z "${FEATS:-}" ]; then
            cargo build -p llama-plugin --release
          else
            cargo build -p llama-plugin --release --features "${FEATS}"
          fi

      # ---------- Stage runtime pack ----------
      - name: Stage pack
        id: stage
        shell: bash
        run: |
          set -euo pipefail
          STAGE="runtime_pack"
          mkdir -p "$STAGE/llama_backend" "$STAGE/licenses"
          cp "target/release/${{ matrix.outplugin }}" "$STAGE/llama_backend/"
          cp "crates/backends/llama/llama-sys/llama.cpp/LICENSE" "$STAGE/licenses/llama.cpp.LICENSE"

          cat > "$STAGE/runtime.json" <<EOF
          {
            "backend": "llama",
            "variant": "${{ matrix.variant }}",
            "os": "${{ matrix.os }}",
            "arch": "${{ matrix.triplet }}",
            "workflow_sha": "${{ github.sha }}",
            "monolith": true
          }
          EOF

          NAME="strata-llama-${{ matrix.triplet }}-${{ matrix.variant }}-${{ matrix.os }}.zip"
          (cd "$STAGE" && zip -r "../$NAME" . >/dev/null)
          echo "name=$NAME" >> "$GITHUB_OUTPUT"

      - name: SHA256 checksum
        shell: bash
        run: |
          FILE="${{ steps.stage.outputs.name }}"
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$FILE" > "$FILE.sha256"
          else
            sha256sum "$FILE" > "$FILE.sha256"
          fi

      - name: Upload runtime pack
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.stage.outputs.name }}
          path: |
            ${{ steps.stage.outputs.name }}
            ${{ steps.stage.outputs.name }}.sha256